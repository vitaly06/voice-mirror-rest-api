import {
  Controller,
  Post,
  Get,
  Body,
  Param,
  Query,
  UploadedFile,
  UseInterceptors,
  ParseIntPipe,
  HttpException,
  HttpStatus,
  ValidationPipe,
} from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiConsumes,
  ApiBody,
  ApiResponse,
  ApiParam,
  ApiQuery,
  ApiProperty,
} from '@nestjs/swagger';
import { FileInterceptor } from '@nestjs/platform-express';
import { AvatarService } from './avatar.service';
import {
  CreateAvatarDto,
  AvatarResponseDto,
  AnimateAvatarDto,
  AvatarAnimationResponseDto,
  AvatarUploadResponseDto,
} from './dto/avatar.dto';

class AvatarImageUploadDto {
  @ApiProperty({
    type: 'string',
    format: 'binary',
    description: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ª–∏—Ü–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ (JPG, PNG, –¥–æ 5MB)',
  })
  image: any;

  @ApiProperty({
    description: '–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞',
    example: '–ú–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥–≤–æ–π–Ω–∏–∫',
  })
  name: string;

  @ApiProperty({
    description: '–û–ø–∏—Å–∞–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)',
    example: '–ê–≤–∞—Ç–∞—Ä –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π',
    required: false,
  })
  description?: string;
}

@ApiTags('üé≠ –ê–≤–∞—Ç–∞—Ä –∏ –∞–Ω–∏–º–∞—Ü–∏—è –ª–∏—Ü–∞')
@Controller('avatar')
export class AvatarController {
  constructor(private readonly avatarService: AvatarService) {}

  @Post('upload')
  @ApiOperation({
    summary: 'üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞',
    description:
      '–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞ –∞–Ω—Ñ–∞—Å.',
  })
  @ApiConsumes('multipart/form-data')
  @ApiBody({
    description: '–§–æ—Ç–æ –ª–∏—Ü–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∞—Ç–∞—Ä–µ',
    type: AvatarImageUploadDto,
  })
  @ApiResponse({
    status: 200,
    description: '–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
    type: AvatarUploadResponseDto,
  })
  @ApiResponse({
    status: 400,
    description:
      '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø, —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞)',
  })
  @UseInterceptors(FileInterceptor('image'))
  async uploadAvatarImage(
    @UploadedFile() file: Express.Multer.File,
    @Body() createAvatarDto: CreateAvatarDto,
  ): Promise<AvatarUploadResponseDto> {
    if (!file) {
      throw new HttpException(
        '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω',
        HttpStatus.BAD_REQUEST,
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    const allowedMimes = ['image/jpeg', 'image/jpg', 'image/png'];
    if (!allowedMimes.includes(file.mimetype)) {
      throw new HttpException(
        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: JPG, PNG',
        HttpStatus.BAD_REQUEST,
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if (file.size > 5 * 1024 * 1024) {
      throw new HttpException(
        '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB',
        HttpStatus.BAD_REQUEST,
      );
    }

    return this.avatarService.createAvatar(file, createAvatarDto);
  }

  @Get()
  @ApiOperation({
    summary: 'üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
  })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
    type: [AvatarResponseDto],
  })
  async getAvatars(): Promise<AvatarResponseDto[]> {
    return this.avatarService.getAvatars();
  }

  @Get(':id')
  @ApiOperation({
    summary: 'üé≠ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–µ',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤–∞—Ç–∞—Ä–µ –ø–æ –µ–≥–æ ID.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID –∞–≤–∞—Ç–∞—Ä–∞',
    example: 1,
  })
  @ApiResponse({
    status: 200,
    description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤–∞—Ç–∞—Ä–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞',
    type: AvatarResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: '–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
  })
  async getAvatar(
    @Param('id', ParseIntPipe) id: number,
  ): Promise<AvatarResponseDto> {
    return this.avatarService.getAvatarById(id);
  }

  @Post('animate')
  @ApiOperation({
    summary: 'üé¨ –ê–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∞—Ç–∞—Ä',
    description: '–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –∞–≤–∞—Ç–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–∞.',
  })
  @ApiBody({
    description: '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞',
    type: AnimateAvatarDto,
  })
  @ApiResponse({
    status: 200,
    description: '–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ',
    type: AvatarAnimationResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: '–ê–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω',
  })
  @ApiResponse({
    status: 500,
    description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏',
  })
  async animateAvatar(
    @Body(ValidationPipe) animateDto: AnimateAvatarDto,
  ): Promise<AvatarAnimationResponseDto> {
    return this.avatarService.animateAvatar(animateDto);
  }

  @Get('animations/:id/status')
  @ApiOperation({
    summary: 'üìä –°—Ç–∞—Ç—É—Å –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞',
    description: '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ ID –∞–Ω–∏–º–∞—Ü–∏–∏.',
  })
  @ApiParam({
    name: 'id',
    description: 'ID –∞–Ω–∏–º–∞—Ü–∏–∏',
    example: 1,
  })
  @ApiResponse({
    status: 200,
    description: '–°—Ç–∞—Ç—É—Å –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
    type: AvatarAnimationResponseDto,
  })
  @ApiResponse({
    status: 404,
    description: '–ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
  })
  async getAnimationStatus(
    @Param('id', ParseIntPipe) id: number,
  ): Promise<AvatarAnimationResponseDto> {
    return this.avatarService.getAnimationStatus(id);
  }

  @Get(':avatarId/animations')
  @ApiOperation({
    summary: 'üéûÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞',
    description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞.',
  })
  @ApiParam({
    name: 'avatarId',
    description: 'ID –∞–≤–∞—Ç–∞—Ä–∞',
    example: 1,
  })
  @ApiResponse({
    status: 200,
    description: '–°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
    type: [AvatarAnimationResponseDto],
  })
  async getAvatarAnimations(
    @Param('avatarId', ParseIntPipe) avatarId: number,
  ): Promise<AvatarAnimationResponseDto[]> {
    return this.avatarService.getAvatarAnimations(avatarId);
  }
}
